allprojects {
    apply plugin: 'idea'
    idea.ext.springFacets = []
    ext.xml = { String rawXml -> new XmlParser().parseText(rawXml) }
}

//register spring facets for all projects with a springLocations property
gradle.taskGraph.whenReady {
    allprojects { p ->
        if (p.plugins.hasPlugin('java') && p.idea.springFacets) {
            List springLocations = [p.idea.springFacets].flatten()

            idea {
                module {
                    iml.withXml { provider ->
                        Node facetComponent = p.xml '<component name="FacetManager"/>'

                        springLocations.each { location ->
                            def component = p.xml """
                                <facet type="Spring" name="Spring">
                                    <configuration>
                                        <fileset id="fileset1" name="XML Application Context" removed="false">
                                            <file>file://\$MODULE_DIR\$/${location}</file>
                                        </fileset>
                                    </configuration>
                                </facet>
                            """
                            facetComponent.append(component)
                        }

                        provider.asNode().append(facetComponent)
                    }
                }
            }
        }
    }
}

cleanIdeaWorkspace.group = 'IDE'

idea {
    project {
        languageLevel = '1.7'
        ipr.withXml { provider ->
            /*
                Automatically enable git or svn integration as appropriate â€” detects which VCS is used by running status commands
             */
            def versionControlMappings = [svn: "svn info", Git: "git status"]


            def vcs = versionControlMappings.find {
                try {
                    it.value.execute(null, rootProject.projectDir).waitFor() == 0
                } catch (Exception ignore) {
                    return false
                }
            }

            if (vcs) {
                def vcsConfig = provider.asNode().component.find { it.'@name' == 'VcsDirectoryMappings' }
                vcsConfig.mapping[0].'@vcs' = vcs.key
            }
        }
    }

    workspace.iws.withXml { provider ->
        def runManagerComponent = provider.asNode().component.find { it.'@name' == 'RunManager'}
        def defaultJunitConfig = runManagerComponent.configuration.find {(it.'@default' == 'true') && (it.'@type' == 'JUnit')}

        defaultJunitConfig.option.find {it.'@name' == 'WORKING_DIRECTORY'}.'@value' = '$MODULE_DIR$' //working dir should match command line tests
        if (System.getenv('JAVA_OPTS')) {
            defaultJunitConfig.option.find {it.'@name' == 'VM_PARAMETERS'}.'@value' = System.getenv('JAVA_OPTS') //set java opts correctly for tests
        }
    }
}
